# -*- mode: python; -*-
#
# craftr_module(baremetal_hi)

from craftr import *
from craftr.ext import rules, unix, compiler
import craftr.ext.compiler.gcc

# Get the tools required to build the app.
objcopy = unix.Objcopy(environ.get('OBJCOPY', 'objcopy'))
gcc = compiler.gcc.Compiler(environ.get('CC', 'gcc'), 'c',
  defines = ['BmArm'],
  additional_flags = [
    '-mcpu=arm926ej-s', '-nodefaultlibs', '-nostdlib',
    '-nostartfiles', '-ffreestanding',
  ],
)

# The GCC compiler implementation can be used for linking.
ld = gcc

# Pre-generated filenames.
startup_obj = path.join(project_name, 'obj', 'startup.o')
linker_script = path.join(project_name, 'link.ld')

# Targets

t_test = gcc.compile(
  sources = [path.local('test.c')],
)

t_startup = gcc.compile(
  sources = [path.local('startup.S')],
  defines = ['RESET_ON_MAIN_COMPLETE'],
  language = None,
)

t_linker_script = rules.render_template(
  output = linker_script,
  template = path.local('Craftr.link-template.ld'),
  STARTUP_OBJ = startup_obj,
)

t_testelf = ld.link(
  inputs = [t_test],
  output = path.abspath('test.elf'),
  linker_script = linker_script,
) << [t_startup]

t_testbin = objcopy.objcopy(
  inputs = t_testelf,
  output_format = 'binary',
)

run = rules.run(
  'qemu-system-arm', '-M', 'versatilepb', '-m', '128M', '-no-reboot', '-kernel', '$in', '-nographic',
  inputs = t_testbin,
)
